#!/bin/bash

# ECP5 Synthesis Script for RPC DRAM Controller
# Usage: ./synth_ecp5.sh [device] [package] [speed]
# Example: ./synth_ecp5.sh LFE5U-25F CABGA381 8

set -e

# Default parameters
DEVICE=${1:-LFE5U-25F}
PACKAGE=${2:-CSFBGA285}
SPEED=${3:-8}

# Map device names to nextpnr options
case $DEVICE in
    LFE5U-12F) NEXTPNR_DEVICE="--12k" ;;
    LFE5U-25F) NEXTPNR_DEVICE="--25k" ;;
    LFE5U-45F) NEXTPNR_DEVICE="--45k" ;;
    LFE5U-85F) NEXTPNR_DEVICE="--85k" ;;
    LFE5UM-25F) NEXTPNR_DEVICE="--um-25k" ;;
    LFE5UM-45F) NEXTPNR_DEVICE="--um-45k" ;;
    LFE5UM-85F) NEXTPNR_DEVICE="--um-85k" ;;
    LFE5UM5G-25F) NEXTPNR_DEVICE="--um5g-25k" ;;
    LFE5UM5G-45F) NEXTPNR_DEVICE="--um5g-45k" ;;
    LFE5UM5G-85F) NEXTPNR_DEVICE="--um5g-85k" ;;
    *) echo "Error: Unsupported device $DEVICE"; exit 1 ;;
esac

echo "======================================="
echo "RPC DRAM Controller - ECP5 Synthesis"
echo "======================================="
echo "Device: $DEVICE"
echo "Package: $PACKAGE"
echo "Speed Grade: $SPEED"
echo ""

# Set up environment
export PATH=/opt/oss-cad-suite/bin:$PATH

# Note: Verilog should already be generated by Makefile target
# If RpcDramController.v doesn't exist, generate it
if [ ! -f "RpcDramController.v" ]; then
    echo "Generating Verilog..."
    cd ../..
    sbt "runMain rpcdram.RpcDramDramOnlyVerilog"
    cd hw/boards/ecp5
    cp ../gen/RpcDramDramOnly.v RpcDramController.v
fi

# Check if Verilog exists
if [ ! -f "../../gen/RpcDramDramOnly.v" ]; then
    echo "Error: RpcDramDramOnly.v not found in ../../gen/!"
    exit 1
fi

# Copy Verilog to current directory for synthesis
cp ../../gen/RpcDramDramOnly.v RpcDramController.v

echo "Running Yosys synthesis..."
yosys -p "script synth_ecp5.ys"

if [ ! -f "RpcDramController_synth.json" ]; then
    echo "Error: Synthesis failed!"
    exit 1
fi

echo "Running nextpnr-ecp5..."
nextpnr-ecp5 \
    --json RpcDramController_synth.json \
    --lpf RpcDramController.lpf \
    --lpf-allow-unconstrained \
    --textcfg RpcDramController.config \
    $NEXTPNR_DEVICE \
    --package $PACKAGE \
    --speed $SPEED \
    --freq 400 \
    --report RpcDramController_report.json \
    --placed-svg RpcDramController_placed.svg \
    --routed-svg RpcDramController_routed.svg

if [ ! -f "RpcDramController.config" ]; then
    echo "Error: Place and route failed!"
    exit 1
fi

echo "Generating utilization report..."
python3 -c "
import json
with open('RpcDramController_report.json') as f:
    data = json.load(f)
print('# FPGA Utilization Report')
print()
print('## Device: LFE5U-25F')
print()
print('## Utilization')
print()
print('| Resource | Used | Available | Percentage |')
print('|----------|------|-----------|------------|')
util = data.get('utilization', {})
for k, v in sorted(util.items()):
    used = v.get('used', 0)
    avail = v.get('available', 0)
    if avail > 0:
        pct = round(used / avail * 100, 1)
    else:
        pct = 'N/A'
    print(f'| {k} | {used} | {avail} | {pct}% |')
print()
print('## Timing')
print()
fmax = data.get('fmax', {})
for clk, info in fmax.items():
    achieved = info.get('achieved', 0)
    constraint = info.get('constraint', 0)
    print(f'- {clk}: {achieved:.2f} MHz (constraint: {constraint} MHz)')
print()
print('## Notes')
print('- Synthesis completed successfully')
print('- Bitstream generated: RpcDramController.bit')
" > RpcDramController_report.md

echo "Generating bitstream..."
ecppack \
    --input RpcDramController.config \
    --bit RpcDramController.bit \
    --compress

if [ ! -f "RpcDramController.bit" ]; then
    echo "Error: Bitstream generation failed!"
    exit 1
fi

echo ""
echo "======================================="
echo "Synthesis completed successfully!"
echo "======================================="
echo "Files generated:"
echo "  - RpcDramController_synth.json (synthesized netlist)"
echo "  - RpcDramController.config (placed and routed config)"
echo "  - RpcDramController.bit (programming bitstream)"
echo "  - RpcDramController_report.json (utilization report)"
echo "  - RpcDramController_placed.svg (placement visualization)"
echo "  - RpcDramController_routed.svg (routing visualization)"
echo ""
echo "To program the FPGA:"
echo "  openFPGALoader -b ecp5-evn RpcDramController.bit"
echo "  # or for other boards:"
echo "  openFPGALoader -b <board> RpcDramController.bit"